version: '3.8'

services:
  nginx:
    image: nginx:alpine
    ports:
      - "90:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    expose:
      - "8000"
    volumes:
      - .:/app
      - /app/venv
    environment:
      - DJANGO_SETTINGS_MODULE=sigorta_api.settings
      - POSTGRES_DB=sigorta_db
      - POSTGRES_USER=sigorta_user
      - POSTGRES_PASSWORD=sigorta_password
      - DB_HOST=db
      - DEBUG=True
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    expose:
      - "3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost/api
      - CHOKIDAR_USEPOLLING=true
      - GENERATE_SOURCEMAP=false
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: sigorta_db
      POSTGRES_USER: sigorta_user
      POSTGRES_PASSWORD: sigorta_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sigorta_user -d sigorta_db"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge 